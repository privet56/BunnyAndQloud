Qt.include("../3d/3rdparty/three.js")
Qt.include("../3d/3rdparty/gl-matrix.js")
Qt.include("../3d/3rdparty/MTLLoader.js")
Qt.include("../3d/3rdparty/OBJLoader.js")
Qt.include("../3d/3rdparty/OBJMTLLoader.js")
Qt.include("../3d/3rdparty/OrbitControls.js")
Qt.include("../3d/3rdparty/ThreeJSLoader.js")
/*
Qt.include("3d/3rdparty/three.js")
Qt.include("3d/3rdparty/gl-matrix.js")
Qt.include("3d/3rdparty/MTLLoader.js")
Qt.include("3d/3rdparty/OBJLoader.js")
Qt.include("3d/3rdparty/OBJMTLLoader.js")
Qt.include("3d/3rdparty/OrbitControls.js")
Qt.include("3d/3rdparty/ThreeJSLoader.js")
*/
var camera, scene, renderer;
var canvas, mouse, raycaster;
var qmlView;
var defaultCameraPosition;

var y = 2000;
var m = 1;
var D = 1;
// Time scale formula based on http://www.stjarnhimlen.se/comp/ppcomp.html
var startD = 367 * y - 7 * (y + (m + 9) / 12) / 4 + 275 * m / 9 + D - 730530;
var oldTimeD = startD;
var currTimeD = startD;

var objects = [];

function initializeGL(_canvas, eventSource, mainView)
{
    canvas = _canvas;
    qmlView = mainView;

    camera = new THREE.PerspectiveCamera(45, canvas.width / canvas.height, 0.1, 1000);
    var distance = 333;
    defaultCameraPosition = new THREE.Vector3(distance,distance,distance);
    camera.position.set(defaultCameraPosition.x, defaultCameraPosition.y, defaultCameraPosition.z);

    scene = new THREE.Scene();

    var light = new THREE.PointLight(0x777777, 2);
    light.position.set(0, 0, 0);
    scene.add(light);

    scene.add(new THREE.AmbientLight(0x111111));

    loadObjects();

    if(objects.length > 0)camera.lookAt(objects[0].position);

    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();

    renderer = new THREE.Canvas3DRenderer({ canvas: canvas, antialias: true, devicePixelRatio: canvas.devicePixelRatio });
    renderer.setClearColor(0x6698FF, 1.0);
    renderer.shadowMapEnabled = true;
    renderer.setPixelRatio(canvas.devicePixelRatio);
    renderer.setSize(canvas.width, canvas.height);

    eventSource.mouseDown.connect(onDocumentMouseDown);
}
function onResizeGL(canvas)
{
    if (camera === undefined) return;

    camera.aspect = canvas.width / canvas.height;
    camera.updateProjectionMatrix();
    renderer.setPixelRatio(canvas.devicePixelRatio);
    renderer.setSize(canvas.width, canvas.height);
}
function paintGL(canvas)
{
    oldTimeD = currTimeD;
    currTimeD = currTimeD + 0.5;
    var deltaTimeD = currTimeD - oldTimeD;

    for (var i = 1; i < objects.length; i ++)
    {
        var object = objects[i];
        //object.position.set(x, y, z);
        //object.rotation.x,y,z
        object.updateMatrix();
    }

    camera.updateProjectionMatrix();
    //camera.position.set(x, y, z);
    //cameraLookAt.add(lookAtOffset);
    //camera.lookAt(cameraLookAt);

    // Render the scene
    renderer.render(scene, camera);
}
function loadObjects()
{
    var path = "file:///e:/svn/sen-soa/trunk/sandbox/ghe/bunnyandqloud/build-bunnyandqloud_qq-5_5_desktop_64bit-Release/release/";


/*
    var objloader = new THREE.OBJLoader();
    objloader.load(path + "3d/ball2.obj", function(result)
    {
        var setMaterial = function(node, material)
        {
            if(material)node.material = material;
            node.castShadow = true;
            node.shading = THREE.SmoothShading;
            if (node.children)
            {
                for (var i = 0; i < node.children.length; i++)
                {
                  setMaterial(node.children[i], material);
                }
            }
        };

        if(!result.scene)result.scene = result;	//for objLoader
        var m = result.scene;
        var material = new THREE.MeshPhongMaterial({color: 0xE8313D});
        setMaterial(result.scene, material);
        scene.add(m);
    });

/*
    var loader = new THREE.OBJMTLLoader();

    loader.load(path + "3d/lea/lea.obj", "3d/lea/lea.mtl", function (lea)
    {
        //lea.translateY(-1.3);	//little bit lower
        lea.scale.set(0.7, 0.7, 0.7);
        //lea.translateX(-12);

        lea.name = "lea";
        lea.rotation.x = 4.7;

        scene.add(lea);
console.log("lea da! ");
    });
    /*
    loader.load("./o/leo/leo.obj", "./o/leo/leo.mtl", function (leo)
    {
        leo.translateY(-1.4);	//little bit lower
        leo.translateX(12);
        leo.scale.set(0.5, 0.5, 0.5);

        leo.name = "leo";
        leo.rotation.x = 4.7;

        adjustrabbit(leo.children, 1);

        scene.add(leo);
    });*/
}
function onDocumentMouseDown(x, y)
{
    mouse.set((x / canvas.width) * 2 - 1, - (y / canvas.height ) * 2 + 1);
    raycaster.setFromCamera(mouse, camera);

    var intersects = raycaster.intersectObjects(objects);
    var selectedObject = -1;

    if (intersects.length > 0)
    {
        var intersect = intersects[0];

        var i = 0;
        while (i < objects.length - 1)
        {
            if (intersect.object === objects[i])
            {
                selectedObject = i;
                break;
            }
            i++;
        }
        if (selectedObject > -1)
        {
            /*qmlView.focusedPlanet = selectedObject;
            if (actualScale <= focusedMinimumScale)     // Limit minimum scaling in focus mode to avoid jitter caused by rounding errors
            {
                objectScale = focusedMinimumScale;
                setScale(focusedMinimumScale, true);
            }
            focusedScaling = true;
            */
        }
    }
    else
    {
        /*qmlView.focusedObject = *;
        // Restore normal scaling
        if (focusedScaling === true)
        {
            focusedScaling = false;
            setScale(actualScale);
        }*/
    }
}
